package io.github.vort2014.spring.service;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.stereotype.Service;

import java.io.ByteArrayInputStream;
import java.io.OutputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Base64;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;

/**
 * Created on 08.08.2017.
 */
@Service
public class PoiServiceImpl implements PoiService {

    // all cells in this file are unlocked
    private static final String EXCEL_TEMPLATE = "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";

    @Override
    public Path getExcelWithLockedCells() throws Exception {
        byte[] bytes = Base64.getDecoder().decode(EXCEL_TEMPLATE);
        XSSFWorkbook xssfWorkbook = new XSSFWorkbook(new ByteArrayInputStream(bytes));


        CellStyle lockedCellStyle = xssfWorkbook.createCellStyle();
        lockedCellStyle.setLocked(true);
        //Create a blank sheet
        xssfWorkbook.setSheetName(0, "Employee Info");
        XSSFSheet spreadsheet = xssfWorkbook.getSheetAt(0);

        //Create row object
        XSSFRow row;
        //This data needs to be written (Object[])
        Map<String, String[]> empinfo = new TreeMap<>();
        empinfo.put("1", new String[]{"EMP ID", "EMP NAME", "DESIGNATION"});
        empinfo.put("2", new String[]{"tp01", "Gopal", "Technical Manager"});
        empinfo.put("3", new String[]{"tp02", "Manisha", "Proof Reader"});
        empinfo.put("4", new String[]{"tp03", "Masthan", "Technical Writer"});
        empinfo.put("5", new String[]{"tp04", "Satish", "Technical Writer"});
        empinfo.put("6", new String[]{"tp05", "Krishna", "Technical Writer"});
        //Iterate over data and write to sheet
        Set<String> keyid = empinfo.keySet();
        int rowid = 0;
        for (String key : keyid) {
            row = spreadsheet.getRow(rowid);
            if (row == null) {
                row = spreadsheet.createRow(rowid);
            }
            rowid++;
            String[] objectArr = empinfo.get(key);
            int cellid = 0;
            for (String value : objectArr) {
                Cell cell = row.getCell(cellid);
                if (cell == null) {
                    cell = row.createCell(cellid);
                }
                cellid++;
                cell.setCellStyle(lockedCellStyle);
                cell.setCellValue(value);
            }
        }
        spreadsheet.protectSheet("");
        //Write the workbook in file system
        Path path = Files.createTempFile("Writesheet", ".xlsx");
        OutputStream out = Files.newOutputStream(path);
        xssfWorkbook.write(out);
        out.close();
        return path;
    }

    @Override
    public Path getExcel() throws Exception {
        //Create blank workbook
        XSSFWorkbook xssfWorkbook = new XSSFWorkbook();
        //Create a blank sheet
        XSSFSheet spreadsheet = xssfWorkbook.createSheet("Employee Info");
        //Create row object
        XSSFRow row;
        //This data needs to be written (Object[])
        Map<String, String[]> empinfo = new TreeMap<>();
        empinfo.put("1", new String[]{"EMP ID", "EMP NAME", "DESIGNATION"});
        empinfo.put("2", new String[]{"tp01", "Gopal", "Technical Manager"});
        empinfo.put("3", new String[]{"tp02", "Manisha", "Proof Reader"});
        empinfo.put("4", new String[]{"tp03", "Masthan", "Technical Writer"});
        empinfo.put("5", new String[]{"tp04", "Satish", "Technical Writer"});
        empinfo.put("6", new String[]{"tp05", "Krishna", "Technical Writer"});
        //Iterate over data and write to sheet
        Set<String> keyid = empinfo.keySet();
        int rowid = 0;
        for (String key : keyid) {
            row = spreadsheet.createRow(rowid++);
            String[] objectArr = empinfo.get(key);
            int cellid = 0;
            for (String value : objectArr) {
                Cell cell = row.createCell(cellid++);
                cell.setCellValue(value);
            }
        }
        //Write the workbook in file system
        Path path = Files.createTempFile("Writesheet", ".xlsx");
        OutputStream out = Files.newOutputStream(path);
        xssfWorkbook.write(out);
        out.close();
        return path;
    }
}
